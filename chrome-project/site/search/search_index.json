{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CHROME Overview This section provides an overview of the Centralized Healthcare Resource Optimization Management (CHROME) Platform. About CHROME CHROME is a flexible and holistic platform for managing medical resources to make life better for healthcare professionals. It includes: Integrated micro-service ecosystem for easy deployment and use Ubiquitous tools that can be accessed anytime, anywhere Support strategic and tactical decision-making for scheduling medical resources Uses for CHROME CHROME can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff Predict service duration more accurately Enhance the patient journey experience Allow quick retrieval of information and estimates for reporting Enable cross-institutional collaboration and research Flexible framework for quick deployment and integration Commands chrome start - Starts the CHROME server chrome list-sessions - List all active sessions chrome status - Print CHROME server status chrome -h - Print help message and exit. Getting Started import chrome from chrome.client.config import ChromeClient, Config from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() simulation_model = SimulationModel(client=conn) # Work on simulation model here prediction_model = PredictionModel(client=conn) # Work on prediction model here","title":"Home"},{"location":"#chrome-overview","text":"This section provides an overview of the Centralized Healthcare Resource Optimization Management (CHROME) Platform.","title":"CHROME Overview"},{"location":"#about-chrome","text":"CHROME is a flexible and holistic platform for managing medical resources to make life better for healthcare professionals. It includes: Integrated micro-service ecosystem for easy deployment and use Ubiquitous tools that can be accessed anytime, anywhere Support strategic and tactical decision-making for scheduling medical resources","title":"About CHROME"},{"location":"#uses-for-chrome","text":"CHROME can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff Predict service duration more accurately Enhance the patient journey experience Allow quick retrieval of information and estimates for reporting Enable cross-institutional collaboration and research Flexible framework for quick deployment and integration","title":"Uses for CHROME"},{"location":"#commands","text":"chrome start - Starts the CHROME server chrome list-sessions - List all active sessions chrome status - Print CHROME server status chrome -h - Print help message and exit.","title":"Commands"},{"location":"#getting-started","text":"import chrome from chrome.client.config import ChromeClient, Config from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() simulation_model = SimulationModel(client=conn) # Work on simulation model here prediction_model = PredictionModel(client=conn) # Work on prediction model here","title":"Getting Started"},{"location":"advanced/","text":"Advanced Usage of CHROME This guide is meant for advanced users and developers who are interested in using custom functions and building on top of CHROME capabilities.","title":"Advanced Usage of CHROME"},{"location":"advanced/#advanced-usage-of-chrome","text":"This guide is meant for advanced users and developers who are interested in using custom functions and building on top of CHROME capabilities.","title":"Advanced Usage of CHROME"},{"location":"optimization/","text":"CHROME Optimize This section provides an overview of the CHROME optimization module and its functions Overview CHROME Optimize is a generic optimization framework for solving optimization models involving healthcare resources, such as operating theatres, beds and medical equipment. It includes: High level APIs for easily defining optimization models based in the healthcare context Integration with external frameworks such as RSOME, pyatom Support for strategic and tactical decision-making for scheduling medical resources Uses for CHROME Optimize CHROME Optimize can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff Getting Started - Basic Example import chrome from chrome.client.config import ChromeClient, Config from chrome.client.optimization import OptimizationModel import chrome.client.optimization as co my_config = Config(API_KEY='<API KEY>', version='0.1') conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() optimization_model = OptimizationModel(client=conn) # Define model variables and parameters X = co.DecisionVariable() A = co.Parameter() B = co.Parameter() C = co.CostParameter() # Define constraint and objective formulas constraint_1 = co.Constraint(A*X > B) objective_1 = co.Objective(C*X) # Set up optimization model optimization_model.add_variable(X) optimization_model.add_constraint(constraint_1) optimization_model.add_objective(objective_1) # Compile and solve model optimization_model.compile() optimization_model.solve() report = optimization_model.report()","title":"Optimization"},{"location":"optimization/#chrome-optimize","text":"This section provides an overview of the CHROME optimization module and its functions","title":"CHROME Optimize"},{"location":"optimization/#overview","text":"CHROME Optimize is a generic optimization framework for solving optimization models involving healthcare resources, such as operating theatres, beds and medical equipment. It includes: High level APIs for easily defining optimization models based in the healthcare context Integration with external frameworks such as RSOME, pyatom Support for strategic and tactical decision-making for scheduling medical resources","title":"Overview"},{"location":"optimization/#uses-for-chrome-optimize","text":"CHROME Optimize can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff","title":"Uses for CHROME Optimize"},{"location":"optimization/#getting-started-basic-example","text":"import chrome from chrome.client.config import ChromeClient, Config from chrome.client.optimization import OptimizationModel import chrome.client.optimization as co my_config = Config(API_KEY='<API KEY>', version='0.1') conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() optimization_model = OptimizationModel(client=conn) # Define model variables and parameters X = co.DecisionVariable() A = co.Parameter() B = co.Parameter() C = co.CostParameter() # Define constraint and objective formulas constraint_1 = co.Constraint(A*X > B) objective_1 = co.Objective(C*X) # Set up optimization model optimization_model.add_variable(X) optimization_model.add_constraint(constraint_1) optimization_model.add_objective(objective_1) # Compile and solve model optimization_model.compile() optimization_model.solve() report = optimization_model.report()","title":"Getting Started - Basic Example"},{"location":"prediction/","text":"CHROME Predict This section provides an overview of the CHROME Predict module and its functions Overview CHROME Predict is a prediction model building framework for designing, building and deploying custom prediction models. It includes: GUI-based prediction model pipeline builder Allows access to pre-built prediction models with defined inputs Uses for CHROME Predict CHROME Simulation can be used for: Predict service duration more accurately Enhance the patient journey experience Allow quick retrieval of information and estimates for reporting Getting Started - Basic Example import pandas as pd import chrome from chrome.client.config import ChromeClient, Config from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel import chrome.client.prediction as cp my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() prediction_model = PredictionModel(client=conn) # Work on prediction model here # Creating a basic prediction pipeline pipeline = cp.Pipeline() # Specify training, test dataset and features df = pd.read_csv('test_dataset.csv') X_train, y_train, X_test, y_test = train_test_split(df,split = 0.2) input_features = ['Procedure Code','OT Code','Age'] target_feature = 'Actual Duration' pipeline.input_dataset(train=[X_train,y_train],test=[X_test,y_test]) pipeline.model_features(input=input_features,target=target_feature) # Specify model type and training parameters pipeline.model_type('XGBoost') pipeline.fit() # Access pre-built models prediction_model.register_model('LOS-Admission-Modelv1') predictions = prediction_model.predict(X_test)","title":"Prediction"},{"location":"prediction/#chrome-predict","text":"This section provides an overview of the CHROME Predict module and its functions","title":"CHROME Predict"},{"location":"prediction/#overview","text":"CHROME Predict is a prediction model building framework for designing, building and deploying custom prediction models. It includes: GUI-based prediction model pipeline builder Allows access to pre-built prediction models with defined inputs","title":"Overview"},{"location":"prediction/#uses-for-chrome-predict","text":"CHROME Simulation can be used for: Predict service duration more accurately Enhance the patient journey experience Allow quick retrieval of information and estimates for reporting","title":"Uses for CHROME Predict"},{"location":"prediction/#getting-started-basic-example","text":"import pandas as pd import chrome from chrome.client.config import ChromeClient, Config from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel import chrome.client.prediction as cp my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() prediction_model = PredictionModel(client=conn) # Work on prediction model here # Creating a basic prediction pipeline pipeline = cp.Pipeline() # Specify training, test dataset and features df = pd.read_csv('test_dataset.csv') X_train, y_train, X_test, y_test = train_test_split(df,split = 0.2) input_features = ['Procedure Code','OT Code','Age'] target_feature = 'Actual Duration' pipeline.input_dataset(train=[X_train,y_train],test=[X_test,y_test]) pipeline.model_features(input=input_features,target=target_feature) # Specify model type and training parameters pipeline.model_type('XGBoost') pipeline.fit() # Access pre-built models prediction_model.register_model('LOS-Admission-Modelv1') predictions = prediction_model.predict(X_test)","title":"Getting Started - Basic Example"},{"location":"scheduling/","text":"CHROME Schedule This section provides an overview of the CHROME Scheduling module and its functions Overview CHROME Schedule is a flexible patient journey builder for mapping out key touchpoints in the patient journey and estimating resource requirements using pre-built and custom prediction models. Integration with existing prediction models for multiple outputs Ability to connect custom user build models End-to-end patient journey estimation of resource requirements Uses for CHROME Schedule CHROME Schedule can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff Getting Started - Basic Example import chrome from chrome.client.config import ChromeClient, Config import chrome.client.schedule as ch import chrome.client.prediction as cp from chrome.client.prediction import PredictionModel from chrome.client.schedule import Scheduler my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() scheduler = Scheduler(client=conn) prediction_model = PredictionModel(client=conn) # Define input data input_data = {'Age':'55', 'Discipline':'OTO', 'Procedure Code': 'SB810K', 'Gender':'M', 'ASA Status':'II', 'Priority':'Elective'} # Specify journey touchpoints and associated models pt_journey = {'Consultation': prediction_model.register_model('ConsultTimeModelv1'), 'SurgeryListing': prediction_model.register_model('SurgeryDurationModelv1'), 'PreopAdmissionTest': prediction_model.register_model('LOSAdmissionModelv2')} # Set up scheduling model scheduler.add_input(input_data) scheduler.add_journey(pt_journey) # Run scheduler and retrieve report scheduler.compile() scheduler.predict() report = scheduler.report()","title":"Scheduling"},{"location":"scheduling/#chrome-schedule","text":"This section provides an overview of the CHROME Scheduling module and its functions","title":"CHROME Schedule"},{"location":"scheduling/#overview","text":"CHROME Schedule is a flexible patient journey builder for mapping out key touchpoints in the patient journey and estimating resource requirements using pre-built and custom prediction models. Integration with existing prediction models for multiple outputs Ability to connect custom user build models End-to-end patient journey estimation of resource requirements","title":"Overview"},{"location":"scheduling/#uses-for-chrome-schedule","text":"CHROME Schedule can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhance resource management capabilities of management staff","title":"Uses for CHROME Schedule"},{"location":"scheduling/#getting-started-basic-example","text":"import chrome from chrome.client.config import ChromeClient, Config import chrome.client.schedule as ch import chrome.client.prediction as cp from chrome.client.prediction import PredictionModel from chrome.client.schedule import Scheduler my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() scheduler = Scheduler(client=conn) prediction_model = PredictionModel(client=conn) # Define input data input_data = {'Age':'55', 'Discipline':'OTO', 'Procedure Code': 'SB810K', 'Gender':'M', 'ASA Status':'II', 'Priority':'Elective'} # Specify journey touchpoints and associated models pt_journey = {'Consultation': prediction_model.register_model('ConsultTimeModelv1'), 'SurgeryListing': prediction_model.register_model('SurgeryDurationModelv1'), 'PreopAdmissionTest': prediction_model.register_model('LOSAdmissionModelv2')} # Set up scheduling model scheduler.add_input(input_data) scheduler.add_journey(pt_journey) # Run scheduler and retrieve report scheduler.compile() scheduler.predict() report = scheduler.report()","title":"Getting Started - Basic Example"},{"location":"simulation/","text":"CHROME Simulate This section provides an overview of the CHROME Simulation module and its functions Overview CHROME Simulation is a flexible simulation framework for designing, building and deploying custom simulation models based on medical resource management processes. It includes: GUI-based simulation model builder with drag-and-drop functionalities Supports custom functions and methods for defining input parameters and interactions Uses for CHROME Simulation CHROME Simulation can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhancing resource management capabilities of management staff Getting Started - Basic Example import chrome from chrome.client.config import ChromeClient, Config from chrome.client.simulation import SimulationModel import chrome.client.simulation as cs my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() simulation_model = SimulationModel(client=conn) # Work on simulation model here # Creating Patient object pt = cs.Patient(age=55, gender='M', primary_discipline='OTO') # Creating multiple Patient objects with random attributes N = 100 pt_list = [cs.Patient(random_attr=True) for n in range(len(N))] # Creating multiple OT objects according to defined attribute lists ot_names = ['L1','M4','OT22','OT26','M3'] ot_list = [cs.OT(ot_name=n) for n in ot_names] # Defining interactions between objects with functions def schedule_function(patient,ot): ot.Surgery_List.append(patient) return True intr_surgery_scheduling = cs.Interaction(entities=[pt,ot],interaction_function=schedule_function) # Defining metrics to be collected from simulation model def get_utilization(ot_list): utilization = 0 for ot in ot_list: utilization += ot.Utilized_Duration return utilization metric_utilization = cs.Metrics(entities=[ot_list],metric_function=get_utilization) # Add objects and interactions to simulation model simulation_model.add_entities(pt_list) simulation_model.add_entities(ot_list) simulation_model.add_interactions(intr_surgery_scheduling) simulation_model.add_metrics(metric_utilization) # Compile and run simulation model simulation_model.compile() simulation_model.run() report = simulation_model.get_report()","title":"Simulate"},{"location":"simulation/#chrome-simulate","text":"This section provides an overview of the CHROME Simulation module and its functions","title":"CHROME Simulate"},{"location":"simulation/#overview","text":"CHROME Simulation is a flexible simulation framework for designing, building and deploying custom simulation models based on medical resource management processes. It includes: GUI-based simulation model builder with drag-and-drop functionalities Supports custom functions and methods for defining input parameters and interactions","title":"Overview"},{"location":"simulation/#uses-for-chrome-simulation","text":"CHROME Simulation can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhancing resource management capabilities of management staff","title":"Uses for CHROME Simulation"},{"location":"simulation/#getting-started-basic-example","text":"import chrome from chrome.client.config import ChromeClient, Config from chrome.client.simulation import SimulationModel import chrome.client.simulation as cs my_config = Config(API_KEY='<API KEY>', version='0.1' ) conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() simulation_model = SimulationModel(client=conn) # Work on simulation model here # Creating Patient object pt = cs.Patient(age=55, gender='M', primary_discipline='OTO') # Creating multiple Patient objects with random attributes N = 100 pt_list = [cs.Patient(random_attr=True) for n in range(len(N))] # Creating multiple OT objects according to defined attribute lists ot_names = ['L1','M4','OT22','OT26','M3'] ot_list = [cs.OT(ot_name=n) for n in ot_names] # Defining interactions between objects with functions def schedule_function(patient,ot): ot.Surgery_List.append(patient) return True intr_surgery_scheduling = cs.Interaction(entities=[pt,ot],interaction_function=schedule_function) # Defining metrics to be collected from simulation model def get_utilization(ot_list): utilization = 0 for ot in ot_list: utilization += ot.Utilized_Duration return utilization metric_utilization = cs.Metrics(entities=[ot_list],metric_function=get_utilization) # Add objects and interactions to simulation model simulation_model.add_entities(pt_list) simulation_model.add_entities(ot_list) simulation_model.add_interactions(intr_surgery_scheduling) simulation_model.add_metrics(metric_utilization) # Compile and run simulation model simulation_model.compile() simulation_model.run() report = simulation_model.get_report()","title":"Getting Started - Basic Example"},{"location":"visualization/","text":"CHROME Visualize This section provides an overview of the CHROME Visualization module and its functions Overview CHROME Visualization is a flexible visualization framework for displaying results from CHROME modules in an interactive manner. It includes: GUI-based dashboard builder for plotting model results Supports custom functions and methods for defining input parameters and interactions Uses for CHROME Visualize CHROME Visualize can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhancing resource management capabilities of management staff Getting Started - Basic Example import chrome from chrome.client.config import ChromeClient, Config import chrome.client.schedule as ch import chrome.client.prediction as cp from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel from chrome.client.visualization import Visualizer import chrome.client.visualization as cv my_config = Config(API_KEY='<API KEY>', version='0.1') conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() visualizer = Visualizer(client=conn) scheduler = Scheduler(client=conn) prediction_model = PredictionModel(client=conn) # Load previous prediction and simulation model results duration_model_results = prediction_model.load_results('SurgeryDuration-190120-2030') simulation_results = simulation_model.load_results('OTSimulation-190120-2030') # Generate plots from results duration_errors = cv.Histogram(x=duration_model_results['Error'].bins, y=duration_model_results['Error']) utilization_rate = cv.Plot(x=simulation_results['Date'], x=simulation_results['Utilization']) visualizer.add_plot(duration_errors) visualizer.add_plot(utilization_rate) visualzier.update()","title":"Visualization"},{"location":"visualization/#chrome-visualize","text":"This section provides an overview of the CHROME Visualization module and its functions","title":"CHROME Visualize"},{"location":"visualization/#overview","text":"CHROME Visualization is a flexible visualization framework for displaying results from CHROME modules in an interactive manner. It includes: GUI-based dashboard builder for plotting model results Supports custom functions and methods for defining input parameters and interactions","title":"Overview"},{"location":"visualization/#uses-for-chrome-visualize","text":"CHROME Visualize can be used for: Estimating future medical resource requirements Optimal scheduling and allocation of resources Enhancing resource management capabilities of management staff","title":"Uses for CHROME Visualize"},{"location":"visualization/#getting-started-basic-example","text":"import chrome from chrome.client.config import ChromeClient, Config import chrome.client.schedule as ch import chrome.client.prediction as cp from chrome.client.prediction import PredictionModel from chrome.client.simulation import SimulationModel from chrome.client.visualization import Visualizer import chrome.client.visualization as cv my_config = Config(API_KEY='<API KEY>', version='0.1') conn = ChromeClient(client_name='firstclient',config=my_config) conn.connect() visualizer = Visualizer(client=conn) scheduler = Scheduler(client=conn) prediction_model = PredictionModel(client=conn) # Load previous prediction and simulation model results duration_model_results = prediction_model.load_results('SurgeryDuration-190120-2030') simulation_results = simulation_model.load_results('OTSimulation-190120-2030') # Generate plots from results duration_errors = cv.Histogram(x=duration_model_results['Error'].bins, y=duration_model_results['Error']) utilization_rate = cv.Plot(x=simulation_results['Date'], x=simulation_results['Utilization']) visualizer.add_plot(duration_errors) visualizer.add_plot(utilization_rate) visualzier.update()","title":"Getting Started - Basic Example"}]}